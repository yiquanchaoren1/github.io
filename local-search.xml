<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>reduce逐步优化</title>
    <link href="/2024/06/29/reduce%E4%BC%98%E5%8C%96/"/>
    <url>/2024/06/29/reduce%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h3><p><a href="https://zhuanlan.zhihu.com/p/426978026">深入浅出GPU优化系列：reduce优化 - 知乎 (zhihu.com)</a></p><h3 id="reduce-baseline-算法（基础规约算法）"><a href="#reduce-baseline-算法（基础规约算法）" class="headerlink" title="reduce baseline 算法（基础规约算法）"></a>reduce baseline 算法（基础规约算法）</h3><p>我们让Num_per_block与Thread_per_block一致，即一个线程处理一个数据，每个block设定为256个线程，一个block负责256个数据的reduce工作。</p><p>假设要处理32M（32*1024）个数据，那么需要的block数为 32M&#x2F;256 &#x3D; 128 个线程。</p><p>tid代表每个block里面的线程号，i代表原数组的索引号，将原数组的值分配到每个shared memory 中</p><p>sdata[tid] &#x3D; d_in[i]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;hip/hip_runtime.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;hip/hip_runtime_api.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 32768</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> threadsPerBlock = <span class="hljs-number">256</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> blocksPerGrid = <span class="hljs-number">128</span>;<br><br><span class="hljs-function">__global__ <span class="hljs-type">void</span> <span class="hljs-title">reduce0</span><span class="hljs-params">(<span class="hljs-type">int</span> *d_in,<span class="hljs-type">int</span> *d_out)</span></span>&#123;<br>__shared__ <span class="hljs-type">int</span> sdata[threadsPerBlock];<br><br><span class="hljs-comment">//each thread loads one element form global memory to shared memory</span><br><span class="hljs-type">int</span> i = threadIdx.x + blockIdx.x * blockDim.x;<br><span class="hljs-type">int</span> tid = threadIdx.x;<br>sdata[tid] = d_in[i];<br>__syncthreads();<br><br><span class="hljs-comment">//do reduction in shared memory</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s = <span class="hljs-number">1</span>;s&lt;blockDim.x;s*=<span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">if</span>(tid%(<span class="hljs-number">2</span>*s)==<span class="hljs-number">0</span>)&#123;<br>sdata[tid] += sdata[tid+s];<br>&#125;<br>__syncthreads();<br>&#125;<br><br><span class="hljs-comment">//wirte result for this block to global memory</span><br><span class="hljs-keyword">if</span>(tid ==<span class="hljs-number">0</span>)&#123;<br>d_out[blockIdx.x] = sdata[<span class="hljs-number">0</span>];<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>&#123;<br><br><span class="hljs-type">int</span> a[N],partial_c[blocksPerGrid];<br><span class="hljs-type">long</span> c;<br><span class="hljs-type">int</span> *d_a,*d_partial_c;<br><span class="hljs-built_in">hipMalloc</span>((<span class="hljs-type">void</span> **)&amp;d_a,N*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-built_in">hipMalloc</span>((<span class="hljs-type">void</span> **)&amp;d_partial_c,blocksPerGrid*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-comment">//initial</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;N;i++)&#123;<br>a[i] = i;<br>&#125;<br><span class="hljs-built_in">hipMemcpy</span>(d_a,a,N*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>),hipMemcpyHostToDevice);<br>reduce0&lt;&lt;&lt;blocksPerGrid,threadsPerBlock&gt;&gt;&gt;(d_a,d_partial_c);<br><span class="hljs-built_in">hipMemcpy</span>(partial_c,d_partial_c,blocksPerGrid*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>),hipMemcpyDeviceToHost);<br><br>c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;blocksPerGrid;i++)&#123;<br>c += partial_c[i];<br>&#125;<br><br><span class="hljs-built_in">hipFree</span>(d_a);<br><span class="hljs-built_in">hipFree</span>(d_partial_c);<br><br><span class="hljs-comment">//check the result</span><br><span class="hljs-keyword">if</span>(c==<span class="hljs-number">32767</span>*<span class="hljs-number">32768</span>/<span class="hljs-number">2</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;success\n&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fail\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c=%ld&quot;</span>,c);<br>&#125;<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="what-is-warp-and-bank"><a href="#what-is-warp-and-bank" class="headerlink" title="what is warp and bank"></a>what is warp and bank</h3><h4 id="warp"><a href="#warp" class="headerlink" title="warp:"></a>warp:</h4><p>并行计算时最小的并发结构，通常由连续32个thread组成,也称线程束。</p><h4 id="bank"><a href="#bank" class="headerlink" title="bank:"></a>bank:</h4><p>是对SM中共享内存的划分，划分个数与对应硬件warp中所含thread数一致。对应使用的计算能力3.x版本的显卡，一个warp含有32个thread，因此划分的bank数也为32，并且每个bank的宽度大小为4bytes，对应于一个int型或float型变量。</p><h3 id="优化1：解决warp-divergence"><a href="#优化1：解决warp-divergence" class="headerlink" title="优化1：解决warp divergence"></a>优化1：解决warp divergence</h3><h4 id="warp-divergence："><a href="#warp-divergence：" class="headerlink" title="warp divergence："></a>warp divergence：</h4><p>对于同一个warp中的所有thread是完全并行的，且必须要执行相同的指令，当同一warp中的thread分配了不同的指令时，会发生warp divergence，增加了程序的运行时间。为了有效地解决上述divergence问题，在分配任务时，尽量的使用索引号连续的thread，使活跃的thread全部集中到某些warp中，避免同一warp中同时存在活跃和不活跃两种状态的thread。</p><p>对于reduce算法问题，如果存在if-else这样的分支情况的话，thread会执行所有的分支。只是不满足条件的分支，所产生的结果不会记录下来。可以在图中看到，在每一轮迭代中都会产生两个分支，分别是红色和橙色的分支。这严重影响了代码执行的效率。其中红色的线程是符合if条件的线程，只有他们需要干活。</p><p><img src="/../images/1719653482706.png" alt="1719653482706"></p><p>解决的方式也比较明了，就是尽可能地让所有线程走到同一个分支里面。</p><p>虽然代码依旧存在着if语句，但是却与reduce0代码有所不同。我们继续假定block中存在256个thread，即拥有256&#x2F;32&#x3D;8个warp。由于blockDim.x &#x3D; 256。对于3号warp，index &#x3D; 2乘tid&#x3D;2乘4乘32&#x3D;256，正好到第三个warp。当进行<strong>第1次迭代</strong>时，0-3号warp的index&lt;blockDim.x， 4-7号warp的index&gt;&#x3D;blockDim.x。对于每个warp而言，都只是进入到一个分支内，所以并不会存在warp divergence的情况。当进行<strong>第2次迭代</strong>时，0、1号两个warp进入计算分支。当进行<strong>第3次迭代</strong>时，只有0号warp进入计算分支。当进行<strong>第4次迭代</strong>时，只有0号warp的前16个线程进入分支。此时开始产生warp divergence。通过这种方式，我们消除了前3次迭代的warp divergence。</p><p>这样第一轮迭代只有前3个warp里面的连续线程是忙碌的，消除了warp divergence</p><h4 id="优化代码："><a href="#优化代码：" class="headerlink" title="优化代码："></a>优化代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">__global__ <span class="hljs-type">void</span> <span class="hljs-title">reduce1</span><span class="hljs-params">(<span class="hljs-type">int</span> *d_in,<span class="hljs-type">int</span> *d_out)</span></span>&#123;<br>__shared__ <span class="hljs-type">int</span> sdata[threadsPerBlock];<br><br><span class="hljs-type">int</span> i = threadIdx.x + blockIdx.x * blockDim.x;<br><span class="hljs-type">int</span> tid = threadIdx.x;<br>sdata[tid] = d_in[i];<br>__syncthreads();<br><span class="hljs-comment">//do reduction in shared memory</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s = <span class="hljs-number">1</span>;s&lt;blockDim.x;s*=<span class="hljs-number">2</span>)&#123;<br><span class="hljs-type">int</span> index = <span class="hljs-number">2</span>*tid*s;<br><span class="hljs-keyword">if</span>(index &lt; blockDim.x)&#123;<br>sdata[index] += sdata[index+s];<br>&#125;<br>__syncthreads();<br>&#125;<br><span class="hljs-comment">//wirte result for this block to global memory</span><br><span class="hljs-keyword">if</span>(tid == <span class="hljs-number">0</span>)&#123;<br>d_out[blockIdx.x] = sdata[<span class="hljs-number">0</span>];<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="优化2：解决bank冲突"><a href="#优化2：解决bank冲突" class="headerlink" title="优化2：解决bank冲突"></a>优化2：解决bank冲突</h3><h4 id="bank-conflict"><a href="#bank-conflict" class="headerlink" title="bank conflict:"></a>bank conflict:</h4>]]></content>
    
    
    <categories>
      
      <category>hpc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hpc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天气晴，明天有雨</title>
    <link href="/2024/06/28/%E9%9A%8F%E7%AC%941/"/>
    <url>/2024/06/28/%E9%9A%8F%E7%AC%941/</url>
    
    <content type="html"><![CDATA[<h4 id="搭建了我的博客"><a href="#搭建了我的博客" class="headerlink" title="搭建了我的博客"></a>搭建了我的博客</h4><p>github 文章永生</p><p>明天加油吧！！！</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流体力学</title>
    <link href="/2024/06/28/%E6%B5%81%E4%BD%93%E5%8A%9B%E5%AD%A6/"/>
    <url>/2024/06/28/%E6%B5%81%E4%BD%93%E5%8A%9B%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>学习记录</p><p>1.流体研究的前提：连续介质假设<br>2.流体力学的物理量：速度，密度，压强，温度等</p><h3 id="描述流体运动的方法："><a href="#描述流体运动的方法：" class="headerlink" title="描述流体运动的方法："></a>描述流体运动的方法：</h3><p>①拉格朗日法：以一坨流体的某个质点为例，研究这个质点的随时间的变化，即盯着质点看。<br>②欧拉法：在空间取一个范围，即控制体，控制体（固定不动），如控制体中取某位置，研究该位置所在流体的性质，也就是盯着空间看。<br>●总结：拉格朗日法研究的是一坨流体（积分）或者说某个质点（微分）；欧拉法研究的是控制体（积分）或空间点（微分）</p><p><img src="/../images/1713422480785.png" alt="1713422480785"></p><h3 id="流体力学的任务（要解决什么问题）"><a href="#流体力学的任务（要解决什么问题）" class="headerlink" title="流体力学的任务（要解决什么问题）"></a>流体力学的任务（要解决什么问题）</h3><p>例子：血栓的形成，航天器内部气体的流动</p><p>研究一定条件下，任意时刻（t），任意位置（x,y,z）各种物理量（p，ρ，T，v）的分布</p><p>p(x,y,z,t),ρ（x,y,z,t）…..解这些函数，就涉及流体力学的基本方程。</p><h3 id="流体力学的基本方程（控制方程）"><a href="#流体力学的基本方程（控制方程）" class="headerlink" title="流体力学的基本方程（控制方程）"></a>流体力学的基本方程（控制方程）</h3><p>是一个方程组。</p><p>质量守恒</p><p>动量守恒（动量有三个方向，可以列三个方程）</p><p>能量守恒</p><p>要解6个值 P,ρ，T，t，v（u,v,w）速度有三个方向，一共是6个值</p><p>一共是5个方程，所以还要加一个流体力学本身具有的性质所列出的方程。</p><p><img src="/../images/1713423733375.png" alt="1713423733375"></p><h3 id="质量守恒方程（连续方程）"><a href="#质量守恒方程（连续方程）" class="headerlink" title="质量守恒方程（连续方程）"></a>质量守恒方程（连续方程）</h3><h4 id="积分形式的质量守恒"><a href="#积分形式的质量守恒" class="headerlink" title="积分形式的质量守恒"></a>积分形式的质量守恒</h4><p><img src="/../images/1713516753303.png" alt="1713516753303"></p><p><img src="/../images/1713516816649.png" alt="1713516816649"></p><h4 id="微分形式的质量守恒方程"><a href="#微分形式的质量守恒方程" class="headerlink" title="微分形式的质量守恒方程"></a>微分形式的质量守恒方程</h4><p><img src="/../images/1713516848847.png" alt="1713516848847"></p><p><img src="/../images/1713517551714.png" alt="1713517551714"></p><h4 id="散度和梯度"><a href="#散度和梯度" class="headerlink" title="散度和梯度"></a>散度和梯度</h4><p><img src="/../images/1713517596596.png" alt="1713517596596"></p><p><img src="/../images/1713517639356.png" alt="1713517639356"></p><h4 id="两种特殊情况"><a href="#两种特殊情况" class="headerlink" title="两种特殊情况"></a>两种特殊情况</h4><p>定常流动：流动是稳定的，不随时间而改变</p><p><img src="/../images/1713518306247.png" alt="1713518306247"></p><p>不可压流动：ρ为常数</p><h5 id=""><a href="#" class="headerlink" title=""></a><img src="/../images/1713518419990.png" alt="1713518419990"></h5><h4 id="连续方程微分形式的第二种推导方法"><a href="#连续方程微分形式的第二种推导方法" class="headerlink" title="连续方程微分形式的第二种推导方法"></a>连续方程微分形式的第二种推导方法</h4><p>略</p><p>散度的物理意义：</p><p><img src="/../images/1713520658383.png" alt="1713520658383"></p><p>速度散度：单位体积单位时间的体积变化</p><p><img src="/../images/1713520754996.png" alt="1713520754996"></p><h4 id="定常准一维流动的连续方程"><a href="#定常准一维流动的连续方程" class="headerlink" title="定常准一维流动的连续方程"></a>定常准一维流动的连续方程</h4><p>ρuA&#x3D;常数</p><p><img src="/../images/1713522073052.png" alt="1713522073052"></p><h3 id="动量守恒方程"><a href="#动量守恒方程" class="headerlink" title="动量守恒方程"></a>动量守恒方程</h3><h3 id="能量守恒方程"><a href="#能量守恒方程" class="headerlink" title="能量守恒方程"></a>能量守恒方程</h3>]]></content>
    
    
    <categories>
      
      <category>cfd</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cfd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo_github遇到的问题</title>
    <link href="/2024/06/28/hexo_github%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/06/28/hexo_github%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="冒号后面要加空格"><a href="#冒号后面要加空格" class="headerlink" title="冒号后面要加空格"></a>冒号后面要加空格</h3><h3 id="repo写以下格式"><a href="#repo写以下格式" class="headerlink" title="repo写以下格式"></a>repo写以下格式</h3><p><img src="/../images/1719557282413.png"></p><h3 id="master分支设置"><a href="#master分支设置" class="headerlink" title="master分支设置"></a>master分支设置</h3><p><img src="/../images/1719557364439.png"></p><p><img src="/../images/1719557376929.png"></p>]]></content>
    
    
    <categories>
      
      <category>喜欢捣鼓</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加载图片，研究一下</title>
    <link href="/2024/06/28/%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87/"/>
    <url>/2024/06/28/%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p><img src="/../images/a.jpeg" alt="车"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/06/25/hello-world/"/>
    <url>/2024/06/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
